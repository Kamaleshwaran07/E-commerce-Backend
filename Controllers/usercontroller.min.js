import mongoose from "mongoose";
import User from "../Models/usermodel.min.js"
import bcryptjs from 'bcryptjs';
import jwt from 'jsonwebtoken';

const userController = {
    signup : async(req, res)=>{
        try {
            const {name, email, password, profilePicture} = req.body;
            console.log(name, email, password, {profilePicture})
            const findUser = await User.findOne({email})
            if(findUser){
               return res.status(401).json({message:"Email Id is already in use"})
            }
            const salt = bcryptjs.genSaltSync(10)
            const hashedPassword = await bcryptjs.hashSync(password, salt)
            console.log(hashedPassword);
            
            if(!hashedPassword){
                res.status(400).json({message:"Error in encryption"})
            }
            const newUser = await new User({name, email,password:hashedPassword, profilePicture, role:"Customer"})
            await newUser.save()
            res.status(201).json({message:"User created successfully", newUser})

            
        } catch (error) {
            res.status(500).json({error})
            
        }
    },
    login: async (req, res)=>{
        try {
            const {email, password} = req.body
            console.log(email, password);
            
            const user = await User.findOne({email})
            console.log(user.password);
            
            if(!user){
                return res.status(401).json({message:"User does not exist"})
            }
            const comparePassword = await bcryptjs.compareSync(password, user.password)
            console.log(comparePassword);
            
            if(!comparePassword){
                return res.status(401).json({message:"Invalid Password. Try again or reset the password"})
            }
            const token = jwt.sign({id:user._id, email:user.email, role:user.role}  , process.env.JWT_secret, {expiresIn: 60 * 60})
            const tokenOption = {
                httpOnly : true,
                secure: true
            }
            res.cookie('token', token, tokenOption).status(200).json({message:"Login successful", user, token})
        } catch (error) {
            res.status(500).json({error})
        }
    }
}
export default userController