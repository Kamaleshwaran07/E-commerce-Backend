import mongoose from "mongoose";
import User from "../Models/usermodel.min.js"
import bcryptjs from 'bcryptjs';
import jwt from 'jsonwebtoken';

const userController = {
    signup : async(req, res)=>{
        try {
            const {name, email, password, profilePicture} = req.body;
            console.log(name, email, password, {profilePicture})
            const findUser = await User.findOne({email})
            if(findUser){
               return res.status(401).json({message:"Email Id is already in use"})
            }
            const salt = bcryptjs.genSaltSync(10)
            const hashedPassword = await bcryptjs.hashSync(password, salt)
            console.log(hashedPassword);
            
            if(!hashedPassword){
                res.status(400).json({message:"Error in encryption"})
            }
            const newUser = await new User({name, email,password:hashedPassword, profilePicture, role:"Customer"})
            await newUser.save()
            res.status(201).json({message:"User created successfully", newUser})

            
        } catch (error) {
            res.status(500).json({error})
            
        }
    },
    login: async (req, res)=>{
        try {
            const {email, password} = req.body
            console.log(email, password);
            
            const user = await User.findOne({email})
            // console.log(user.password);
            
            if(!user){
                return res.status(401).json({message:"User does not exist"})
            }
            const comparePassword = await bcryptjs.compareSync(password, user.password)
            // console.log(comparePassword);
            
            if(!comparePassword){
                return res.status(401).json({message:"Invalid Password. Try again or reset the password"})
            }
            const token = jwt.sign({id:user._id, email:user.email, role:user.role}  , process.env.JWT_secret, {expiresIn: 60 * 60})
            const tokenOption = {
                httpOnly : true,
                secure: true
            }
            const userUpdate = await User.findOneAndUpdate({email}, {token: token})
            await userUpdate.save()
            res.cookie('token', token, tokenOption).status(200).json({message:"Login successful", user, token})
        } catch (error) {
            res.status(500).json({error})
        }
    },
    getUserDetails: async(req, res)=>{
        const userId = req.userId
        console.log(userId);
        
        try {
            const user = await User.findById(userId)
            if(!user){
                return res.status(404).json({message:"User not found"})
            }
            res.status(200).json({message:"User found", user})
        } catch (error) {
            res.status(500).json({message:"User Details error"})
        }
    },
    logout: async(req, res)=>{
        try {
            res.clearCookie("token")
            res.status(200).json({message:"Logged out successfully"})
            
        } catch (err) {
            res.status(500).json({message:`Server Error ${err.message}` || err})
        }
    },
    getAllUsers:async(req, res)=>{
        try {
            const userId = req.userId
            const user = await User.findById(userId)
            if(!user){
                return res.status(404).json({message:"User not found"})
            }
            if(user.role!=="Admin"){
                return res.status(403).json({message:"Unauthorized"})
            }
            const users = await User.find()
            console.log(users);
            
            res.status(200).json({message:"Users found", users})
        } catch (error) {
            res.status(500).json({message:`Internal Server Error ${error.message}`})
        }
    },
    editRoleDetails:async(req,res)=>{
        const adminId = req.userId;
        const {userId, role} = req.body;
        try {
            const Admin = await User.findById(adminId)
            console.log(Admin);
            
            if(Admin.role !== "Admin"){
                return res.status(403).json({message:"Unauthorized"})
            }
            const user = await User.findById(userId)
            if(!user){
                return res.status(404).json({message:"User not found"})
            }
            const userUpdate = await User.findByIdAndUpdate(userId, {role:role})
            await userUpdate.save()
            res.status(200).json({message:"User details updated", userUpdate})
        
        } catch (error) {
            res.status(500).json({message:`Error in editing the role, ${error.message}`})
        }
    },
    editUserDetails:async(req,res)=>{
        const { name, email, profilePicture} = req.body;
        try {
            const userId = req.userId
            const user = await User.findByIdAndUpdate(userId, {name:name, email:email, profilePicture:profilePicture})
            await user.save()
            res.status(200).json({message:"User updated successfully", user})
        } catch (error) {
            res.status(500).json({message:`Server Error in editing the user details, ${error.message}`})
        }
    },
    deleteUser:async(req,res)=>{
        const adminId = req.userId;
       
        const {userId} = req.params;
        try {
            const Admin = await User.findById(adminId)
            console.log(Admin);
            if(Admin.role !== "Admin"){
                return res.status(403).json({message:"Unauthorized"})
            }
            const user = await User.findById(userId)
            if(!user){
                return res.status(404).json({message:"User doesn't exist"})
            }
            const userDelete = await User.findByIdAndDelete(userId)
            res.status(200).json({message:"User deleted successfully", userDelete})

            
        } catch (error) {
            res.status(500).json({message:`Error in deleting the user, ${error.message}`})
        }
    },
    changePassword:async(req, res)=>{
        const {oldPassword, newPassword} = req.body;
        console.log(oldPassword, newPassword)
        const userId = req.userId
        try{
            const user = await User.findById(userId)
            const isValidPassword = await bcryptjs.compareSync(oldPassword, user.password)
            if(!isValidPassword){
                return res.status(401).json({message:"Invalid old password"})
            }
            const salt = bcryptjs.genSaltSync(10)
            const hashedPassword = await bcryptjs.hashSync(newPassword, salt)
            console.log(hashedPassword);
            const userUpdate = await User.findByIdAndUpdate(userId, {password:hashedPassword})
            res.status(200).json({message:"Password changed successfully", userUpdate})
        }
        catch(error){
            res.status(500).json({message:`Error in changing the password, ${error.message}`})
    }},
    forgotPassword:async(req,res)=>{
        try {
            
        } catch (error) {
            
        }
    }
}
export default userController